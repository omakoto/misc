#!/bin/bash

set -e
. mutil.sh

# TODO: Maybe use sh-split-words instead for correctness
tokens=("$@")

# First, select the tokens to replace
select_tokens() {
    local t
    local i=0

    for t in "${tokens[@]}" ; do
        echo "$i" "$t"
        i=$(( $i + 1 ))
    done | fzf --tac --multi --with-nth=2.. | cut -f 1 -d ' '
}


# Then, for each selected tokens, try fullpathfy / envify

# helper
recent_dirs_cache=""
get_recent_dirs() {
    if [[ "$recent_dirs_cache" == "" ]] ; then
        recent_dirs_cache="$(recent-dirs -n 20)"
    fi
    echo $recent_dirs_cache
}

col() {
    hl ' #.*' '@333' '\$\{.*?\}' '@253'
}

list_candidates() {
    local t="$1"
    {
        # Show the original
        echo "$t # Original"

        # If it's a relpath, show the abspath
        if [[ "$t" =~ ^/ ]] ; then
            abs="$t"
        elif [[ -e "$t" ]] ; then
            abs=$(realpath -s "$t")
            echo "$abs # Absolute path"
        fi

        # If we have an abspath, try replacing with env
        if [[ "$abs" != "" ]] ; then
            replace-with-env <<< "$abs" | tac
        fi

        # If the token doesn't exist as a file, then see if it exists in any recent dirs
        if ! [[ -e "$t" ]] ; then
            for rd in $(get_recent_dirs); do
                if [[ -e "$rd$t" ]] ; then
                    echo "$(realpath -s "$rd$t") # Relative from $rd"
                fi
            done
        fi
    } | global-unique
}


rewrite_tokens() {
    set +e
    for i in "${selected[@]}" ; do
        t="${tokens[$i]}"
        replaced="$(list_candidates "$t" | col | fzf --ansi | sed -e 's! #.*$!!')"

        if [[ "$replaced" != "" ]] ; then
            tokens[$i]="$replaced"
        fi
    done
}

fzf_mode() {
    selected=( $(select_tokens "${tokens[@]}" | sort -n) )
    rewrite_tokens
    echo "${tokens[@]}"
}

editor_mode() {
    local tmp="/tmp/$$-rewrite.txt"
    {
        echo "#PWD: $PWD"
        echo
        for t in "${tokens[@]}" ; do
            list_candidates "$t" | sed -e '2,$s/^/#/'
            echo ""
        done
    } > "$tmp"

    EE_QUIET=1 1w "$tmp"

    after="$(perl -ne '
#line 94
BEGIN {
    @all = ();
}

chomp;

s/ \# .* $ //x;     # Remove commented out lines
s/\s+$//; # remove trailing spaces

next if /^ \s* $/x; # Skip empty lines

push @all, $_;

END {
    print((join " ", @all));
}

' "$tmp")"
    echo "$after"
}

if (( $EDITOR_MODE )) ; then
    editor_mode
else
    fzf_mode
fi
