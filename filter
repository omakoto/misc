#!/bin/bash

echo "Obsolete -- use hl2 instead"
exit 3

function usage() {
  cat <<'EOF'
filter -- run a command and extract lines matching start/end patterns

Usage:
  filter COMMAND [ARG1 ...] , [ [ START-PAT1 END-PAT1 ] [ @PATTERN ] [ =HIGHLIGHT-PATTERN ] ... ]

This executes a command and extract the lines matching any of the START-PATs
and after, but stops at lines matching the pair END-PAT.

If a pattern is empty or -, then it'll be interpreted as "^\s*$"

Example:
$ filter dumpsys-alarm , 'Forced App Standby Feature enabled' 'Temp whitelist appids' '^\s*Stats:$' -
Output:
-
  Forced App Standby Feature enabled: true
  Force all apps standby: false
  Small Battery Device: false
  Force all apps standby for small battery device: false
  Plugged In: true
  Foreground uids: [u0a6 u0a12 u0a14 u0a21 u0a40 u0a44 u0a90 u0a273]
  Whitelist appids: [1000, 1001, 2000, 10006, 10007, 10010, 10...
-
  Stats:
    UID_STATE_CHANGED: count=146, total=310.2ms, avg=2.124ms
    RUN_ANY_CHANGED: count=0, total=0.0ms, avg=0.000ms
    ALL_UNWHITELISTED: count=0, total=0.0ms, avg=0.000ms
    ALL_WHITELIST_CHANGED: count=0, total=0.0ms, avg=0.000ms
    TEMP_WHITELIST_CHANGED: count=34, total=41.2ms, avg=1.211ms
    EXEMPT_CHANGED: count=0, total=0.0ms, avg=0.000ms
    FORCE_ALL_CHANGED: count=2, total=24.1ms, avg=12.068ms
    FORCE_APP_STANDBY_FEATURE_FLAG_CHANGED: count=0, total=0.0ms, avg=0.000ms
-

Also if a pattern starts with an @, then only print the lines that match it.

Also if a pattern starts with an =, it'll be passed to the hl command for
highlighting.

EOF
}

set -e

. mutil.sh

if [[ "$1" == -h ]] ; then
  usage
  exit 1
fi

# Find , to extract filters and '-p PATTERN's.

args=("$@")

cmd=()  # Arguments before first ,
filter=()   # Arguments after , excluding '-p PATTERN's.
hl_opts=()  # -p PATTERN ...

comma_found=0

for (( i = 0; i < ${#args[@]}; i++ )) ; do
  arg="${args[i]}"
  # echo "$i: $arg"
  if [[ "$arg" == , ]] ; then
    comma_found=1
    continue
  fi
  if (( !$comma_found )) ; then
    cmd+=($arg)
    continue
  fi
  if [[ "$arg" =~ ^= ]] ;then
    hl_opts+=(-p "${arg:1}")
    continue
  fi
  filter+=("$arg")
done

if (( ! $comma_found )) ; then
  echo "$0: Comma not found." 1>&2
  exit 1
fi

hl=cat
if (( ${#hl_opts[@]} > 0 )) ; then
  hl=(hl "${hl_opts[@]}")
fi

if (( 0 )) ; then
  echo "Command: $(shescape "${cmd[@]}")"
  echo "Filter: $(shescape "${filter[@]}")"
  echo "HL: $(shescape "${hl[@]}")"
fi

if (( ${#cmd[@]} == 0 )) ; then
  echo "$0: Missing command" 1>&2
  exit 1
fi

{
  byellow -n "Command: "
  bcyan "$(shescape "${cmd[@]}")"

  byellow -n "Filter: "
  bcyan "$(shescape "${filter[@]}")"
} 1>&2

# Execute the command and feed it to filter.rb
"${cmd[@]}" |& $0.rb "${filter[@]}" | "${hl[@]}"
