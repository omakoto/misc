#!/bin/bash

. "${0%/*}/completer-testbase.bash"

cat >$HOME/.android-devices <<EOF
max
boss
#notused
EOF

# ==============================================================================
# Start tests
# ==============================================================================

export COMPLETER_IGNORE_CASE=1

assert_raw_comp -e 'require "completer"
    Completer.define do
      candidates %w(aaa aab abb ccc)
    end
    ' -- -c 1 cat <<'EOF'
'aaa '
'aab '
'abb '
'ccc '
EOF

# If main() is defined, call it too.
assert_raw_comp -e 'require "completer"
    Completer.define do
      def main
        candidates %w(aaa aab abb ccc)
      end
      main
    end
    ' -- -c 1 cat <<'EOF'
'aaa '
'aab '
'abb '
'ccc '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      candidates %w(aaa aab abb ccc)
    end
    ' -- -c 1 cat a <<'EOF'
'aaa '
'aab '
'abb '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      candidates %w(aaa aab abb ccc)
    end
    ' -- -c 1 cat Aa <<'EOF'
'aaa '
'aab '
EOF

export COMPLETER_IGNORE_CASE=0
assert_raw_comp -e 'require "completer"
    Completer.define do
      candidates %w(aaa aab abb ccc)
    end
    ' -- -c 1 cat Aa <<'EOF'
EOF

export COMPLETER_IGNORE_CASE=1
assert_raw_comp -e 'require "completer"
    Completer.define do
      for_arg do
        candidates %w(aaa aab abb ccc)
      end
    end
    ' -- -c 2 cat xyz <<'EOF'
'aaa '
'aab '
'abb '
'ccc '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      must take_file
    end
    ' -- -c 1 cat <<'EOF'
aaa/
'dir2/ '
'file1 '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 1 cat <<'EOF'
'aaa '
'bbb '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 1 cat a <<'EOF'
'aaa '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 2 cat a <<'EOF'
'xxx '
'yyy '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 3 cat a x <<'EOF'
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      switch do
        option %w(-a -b -c)
        option "--colors", %w(always never auto)
      end
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 1 cat <<'EOF'
'-a '
'-b '
'-c '
'--colors '
'aaa '
'bbb '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      switch do
        option %w(-a -b -c)
        option "--colors", %w(always never auto)
      end
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 1 cat - <<'EOF'
'-a '
'-b '
'-c '
'--colors '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      switch do
        option %w(-a -b -c)
        option "--colors", %w(always never auto)
      end
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 1 cat -- <<'EOF'
'--colors '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      switch do
        option %w(-a -b -c)
        option "--colors", %w(always never auto)
      end
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 2 cat --colors <<'EOF'
'auto '
'always '
'never '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      switch do
        option %w(-a -b -c)
        option "--colors", %w(always never auto)
      end
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 2 cat --colors n <<'EOF'
'never '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      switch do
        option %w(-a -b -c)
        option "--colors", %w(always never auto)
      end
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 2 cat --colors a <<'EOF'
'auto '
'always '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      switch do
        option %w(-a -b -c)
        option "--colors", %w(always never auto)
      end
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 2 cat --colors x <<'EOF'
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      switch do
        option %w(-a -b -c)
        option "--colors", %w(always never auto)
      end
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 3 cat --colors always <<'EOF'
'aaa '
'bbb '
EOF

# "option" in switch doesn't fall-through, so --colors won't be
# in the candidates. See the next test too.
assert_raw_comp -e 'require "completer"
    Completer.define do
      switch do
        option %w(-a -b -c)
        option "--colors", %w(always never auto)
      end
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 2 cat -a <<'EOF'
'aaa '
'bbb '
EOF

# Unlike the previous test, "--colors" is in the candidates,
# because maybe falls-through.
assert_raw_comp -e 'require "completer"
    Completer.define do
      switch do
        maybe %w(-a -b -c)
        maybe "--colors", %w(always never auto)
      end
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 2 cat -a <<'EOF'
'aaa '
'bbb '
'--colors '
EOF

# Unlike "option", maybe can be used outside of a loop.
assert_raw_comp -e 'require "completer"
    Completer.define do
      maybe %w(-a -b -c)
      maybe "--colors", %w(always never auto)
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 2 cat -a <<'EOF'
'aaa '
'bbb '
'--colors '
EOF

# option() can only be used in a loop or one_of.
assert_error raw_comp -e 'require "completer"
    Completer.define do
      option %w(-a -b -c)
      option "--colors", %w(always never auto)
      must %w(aaa bbb), %w(xxx yyy)
    end
    ' -- -c 2 cat -a <<'EOF'
option() used out of for_arg() or switch()
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      for_arg do
        must take_file
      end
    end
    ' -- -c 1 cat <<'EOF'
aaa/
'dir2/ '
'file1 '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      for_arg do
        must take_file
      end
    end
    ' -- -c 2 cat x <<'EOF'
aaa/
'dir2/ '
'file1 '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      for_arg do
        must take_file
      end
    end
    ' -- -c 2 cat x aaa/ <<'EOF'
'aaa/bbb/ '
aaa/ccc/
EOF


assert_raw_comp -e 'require "completer"
    Completer.define do
      for_arg do
        must take_file
      end
    end
    ' -- -c 1 cat nonexistent <<'EOF'
EOF

# Environmental variable completion.

VARS="declare -- HOME=$HOME
declare -- HOST=hostname
declare -- hostname=hostname.domain.com
declare -- PATH=\"a:b:c\"" assert_raw_comp -e 'require "completer"
    Completer.define {} # body does not matter for this test
    ' -- -c 1 cat '$' <<'EOF'
'$HOME'
'$HOST'
'$hostname'
'$PATH'
EOF

VARS="declare -- HOME=$HOME
declare -- HOST=hostname
declare -- hostname=hostname.domain.com
declare -- PATH=\"a:b:c\"" assert_raw_comp -e 'require "completer"
    Completer.define {} # body does not matter for this test
    ' -- -c 1 cat '$h' <<'EOF'
'$HOME'
'$HOST'
'$hostname'
EOF

export COMPLETER_IGNORE_CASE=0
VARS="declare -- HOME=$HOME
declare -- HOST=hostname
declare -- hostname=hostname.domain.com
declare -- PATH=\"a:b:c\"" assert_raw_comp -e 'require "completer"
    Completer.define {} # body does not matter for this test
    ' -- -c 1 cat '$h' <<'EOF'
'$hostname'
EOF

VARS="declare -- HOME=$HOME
declare -- HOST=hostname
declare -- hostname=hostname.domain.com
declare -- PATH=\"a:b:c\"" assert_raw_comp -e 'require "completer"
    Completer.define {} # body does not matter for this test
    ' -- -c 1 cat '$HOME' <<'EOF'
'$HOME'
EOF

VARS="declare -- HOME=$HOME
declare -- HOST=hostname
declare -- hostname=hostname.domain.com
declare -- PATH=\"a:b:c\"" assert_raw_comp -e 'require "completer"
    Completer.define {} # body does not matter for this test
    ' -- -c 1 cat '$HOME/' <<'EOF'
/tmp/home/
EOF

VARS="declare -- HOME=$HOME
declare -- HOST=hostname
declare -- hostname=hostname.domain.com
declare -- PATH=\"a:b:c\"" assert_raw_comp -e 'require "completer"
    Completer.define {} # body does not matter for this test
    ' -- -c 1 cat '$PATH/' <<'EOF'
EOF

# Special casing redirect operators.

export COMPLETER_IGNORE_CASE=1

assert_raw_comp -e 'require "completer"
    Completer.define do
    end
    ' -- -c 1 cat <<'EOF'
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
    end
    ' -- -c 2 cat '<' <<'EOF'
aaa/
'dir2/ '
'file1 '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
    end
    ' -- -c 2 cat '<<<' <<'EOF'
aaa/
'dir2/ '
'file1 '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
    end
    ' -- -c 2 cat '>' <<'EOF'
aaa/
'dir2/ '
'file1 '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
    end
    ' -- -c 2 cat '>>' <<'EOF'
aaa/
'dir2/ '
'file1 '
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
    end
    ' -- -c 2 cat '>!' <<'EOF'
aaa/
'dir2/ '
'file1 '
EOF

# ==============================================================================
# Numbers
# ==============================================================================

assert_raw_comp -e 'require "completer"
    Completer.define do
      must take_number
    end
    ' -- -c 1 cat <<'EOF'
0
1
2
3
4
5
6
7
8
9
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      must take_number
    end
    ' -- -c 1 cat 2 <<'EOF'
20
21
22
23
24
25
26
27
28
29
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      must take_number allow_negative:true
    end
    ' -- -c 1 cat <<'EOF'
0
1
2
3
4
5
6
7
8
9
-1
-2
-3
-4
-5
-6
-7
-8
-9
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      must take_number allow_negative:true
    end
    ' -- -c 1 cat 3 <<'EOF'
30
31
32
33
34
35
36
37
38
39
EOF

assert_raw_comp -e 'require "completer"
    Completer.define do
      must take_number allow_negative:true
    end
    ' -- -c 1 cat -3 <<'EOF'
-30
-31
-32
-33
-34
-35
-36
-37
-38
-39
EOF

done_testing
