#!/bin/bash

#
# This is used instead of 'git commit' by a hack in interactivefuncs.bash
#

. mutil.sh

in-git -e || exit 2

# Update template
commit_template=~/.git-commit-message-template.txt

# Extract the "stanzas" from recent messages and set them as template.
{
    echo "# Git message template $commit_template"
    echo "# This template is generated by $0"
    echo
    git show-recent-messages -n | head -100 | perl -ne 's!^([a-zA-Z]+\: )!# \1! and print' | sort -u 
    echo
} > $commit_template

git config --global commit.template $commit_template

# Start
root=$(git root)
cd "$root"

histfile="$HOME/cbin/temp/git-messages/$(date '+%Y-%m-%d/git-message-%H-%M-%S').txt"

pre_commit="$(git rev-parse HEAD 2>/dev/null)"

show_commit() {
    echo "# Directory: $(pwd)"
    echo "# Branch: $(git current-branch)"
    git -c color.ui=always show --compact-summary | perl -pe 'print "# " if (1..3); s/^    //'
}

print_description() {
    post_commit="$(git rev-parse HEAD 2>/dev/null)"

    commit="$(show_commit)"

    if [[ "$pre_commit" == "$post_commit" ]] ; then
        echo "" 1>&2
        COLOR_OUT=2 byellow "No commit made. The draft message was:"

        # It may be that git was interrupted. So let's print the draft file.
        cat "$(git rev-parse --git-dir)/COMMIT_EDITMSG"

    else
        COLOR_OUT=2 bgreen "Commit was:"
        echo "$commit"

        # Also copy to temp folder
        mkdir -p "${histfile%/*}"
        echo "$commit" > "$histfile"
        COLOR_OUT=2 bcyan "Message copied to: "$histfile""
    fi
}

trap print_description EXIT

git commit "${@}"
rc=$?

# bcyan "Git commit finished with status $rc"

exit $?
