#!/usr/bin/perl -w

use strict;
#use FindBin; use lib "$FindBin::Bin"; # Little slow.
use lib ($0 =~ s!/[^/]+$!!r); #!
use Getopt;

my $allow_files = 0;
my $command;
my $flags;

getopt(
    {nofiles => 0, description => "Generate completion script for bash."},
    ["F|allow-files", \$allow_files,  "Allow files in arguments."],
    ["c|command=s", \$command,        "Specify command name. e.g. \"echo\""],
    ["f|flags=s", \$flags,            "All flags separated by a space. e.g. \"--long -s\""],
    );

die "bashcomp: missing -c flag.\n" unless defined $command;
die "bashcomp: missing -f flag.\n" unless defined $flags;

$flags =~ s!-?-bash-completion\b!!g;

my $out = <<'EOF';
# Bash autocomplete script for the {{.Command}} command.
# Source it with the following command:
# . <({{.Command}} --bash-completion)
_{{.Command}}_complete() {
  local cur="${COMP_WORDS[COMP_CWORD]}"

  COMPREPLY=()

  local flags="{{.Flags}}"

  local cand=""
  case "$cur" in
    "")
      # Uncomment it to make empty completion show help.
      # {{.Command}} -h >/dev/tty
      # return 0
      ;;
    -*)
      cand="$flags"
      ;;
  esac
  if [ "x$cand" = "x" ] ; then
    if (( {{.AllowFiles}} )) ; then
      COMPREPLY=(
          $(compgen -f -- ${cur})
          )
    else
      COMPREPLY=(
          $(compgen -W "$flags" -- ${cur})
          )
    fi
  else
    COMPREPLY=($(compgen -W "$cand" -- ${cur}))
  fi
}

complete -o filenames -o bashdefault -F _{{.Command}}_complete {{.Command}}
EOF

$out =~ s!\{\{\.Command\}\}!$command!g;
$out =~ s!\{\{\.AllowFiles\}\}!$allow_files!g;
$out =~ s!\{\{\.Flags\}\}!$flags!g;

print $out;
