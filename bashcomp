#!/bin/bash

set -e

. mutil.sh

allow_files=0
command=""
flags=""

eval "$(getopt.pl '
F|allow-files+  allow_files=1 # Allow files in arguments.
c|command:      command=%     # Specify command name. e.g. "echo"
f|flags:        flags=%       # All flags separated by a space. e.g. "--long -s"
' "$@")"

if [[ -z "$command" ]] ;then
  echo "$0: missing -c flag." 1>&2
  getopt_usage
  exit 1
fi
if [[ -z "$flags" ]] ;then
  echo "$0: missing -f flag." 1>&2
  getopt_usage
  exit 1
fi

sed \
    -e "s/{{.Command}}/$command/g" \
    -e "s/{{.AllowFiles}}/$allow_files/g" \
    -e "s/{{.Flags}}/$flags/g" \
    <<'EOF'
# Bash autocomplete script for the {{.Command}} command.
# Source it with the following command:
# . <({{.Command}} -bash-completion)
_{{.Command}}_complete() {
  local cur="${COMP_WORDS[COMP_CWORD]}"

  COMPREPLY=()

  local flags="{{.Flags}}"

  local cand=""
  case "$cur" in
    "")
      # Uncomment it to make empty completion show help.
      # {{.Command}} -h >/dev/tty
      # return 0
      ;;
    -*)
      cand="$flags"
      ;;
  esac
  if [ "x$cand" = "x" ] ; then
    if (( {{.AllowFiles}} )) ; then
      COMPREPLY=(
          $(compgen -f -- ${cur})
          )
    else
      COMPREPLY=(
          $(compgen -W "$flags" -- ${cur})
          )
    fi
  else
    COMPREPLY=($(compgen -W "$cand" -- ${cur}))
  fi
}

complete -o filenames -o bashdefault -F _{{.Command}}_complete {{.Command}}
EOF
