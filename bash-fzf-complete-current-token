#!/bin/bash

. mutil.sh

test=0
if [[ -t 1 ]] ; then
  test=1
fi

if (( $test )) ; then
  export token="$1"
else
  export token="$(sh-get-current-token -f)"
fi

# Filter out uninteresting words
clean() {
  perl -pe '(m!^ (?:
        \( [ \d\/\)\, ]*  # (1/3)
    |   \d+ \%            # 32%

    )$!x) and $_=""'
}

expand() {
  local IFS=$'\n'
  echo "$*"
}

s() {
  sort -g
}

get_dir() {
  if [[ -d "$token" ]] ; then
    echo "$token"
  else
    echo "$(dirname "$token")"
  fi
}

candidate_files() {
  (
    shopt -s nullglob

    if ! [[ "$token" =~ / ]] ; then
      command ls
    else
      local dir="$(get_dir)"
      expand "$dir"/*
    fi
  ) | sort | while read -r n; do
    if [[ -d "$n" ]] ; then
      echo "$n/"
    else
      echo "$n"
    fi
  done
}

bfs_files() {
  {
    local timeout=0.2
    local opts="-nocolor -maxdepth 6 -name .git -prune -o -name e2etests -prune -o -print "
    if ! [[ "$token" =~ / ]] ; then
      timeout $timeout bfs $opts | sed -e 's!^\./!!'
    else
      local dir="$(get_dir)"
      timeout $timeout bfs $opts "$dir"
    fi
  } 2>/dev/null
}

maybe_escape() {
  while read -r word ; do
    if [[ "$word" =~ ^\$ ]] ; then
      echo "$word"
    elif [[ "$word" =~ \#verbatim$ ]] ; then
      echo "${word%#verbatim}"
    else
      shescape "$word"
    fi
  done
}

maybe_add_space() {
  while read -r word ; do
    echo -n "$word"
    if [[ -f "$word" ]] ; then
      echo " "
    else
      echo
    fi
  done
}

print() {
  local prefix="$1"
  shift
  timeout 1 perl -pe "print '$prefix'" "$@"
}

cap() {
  local n="$1"
  global-unique | clean | head -n "$n" | s
}

completed=$(
    {
        print "[GIT-BRANCH] " <(
          if in-git ; then
            # Git branches
            git branch | s | sed -n '/^..(/d; s/^. //p;'
          fi
        )

        print "[FILES] " <(
          candidate_files
        )

        if [[ "$ANDROID_BUILD_TOP" ]] ; then
          print '[ABT] $' <<'EOF'
ANDROID_BUILD_TOP/build/soong/
ANDROID_BUILD_TOP/build/make/
ANDROID_BUILD_TOP/cts/
ANDROID_BUILD_TOP/frameworks/
ANDROID_BUILD_TOP/frameworks/base/
ANDROID_BUILD_TOP/frameworks/base/ravenwood/
ANDROID_BUILD_TOP/frameworks/base/ravenwood/scripts/
ANDROID_BUILD_TOP/frameworks/base/ravenwood/scripts/run-ravenwood-tests.sh -s
ANDROID_BUILD_TOP/frameworks/base/ravenwood/tools/hoststubgen/
ANDROID_BUILD_TOP/frameworks/base/ravenwood/tools/hoststubgen/test-tiny-framework
ANDROID_BUILD_TOP/out/
ANDROID_BUILD_TOP/out/soong/.intermediates/
ANDROID_BUILD_TOP/out/soong/.intermediates/frameworks/
ANDROID_BUILD_TOP/out/soong/.intermediates/frameworks/base/
ANDROID_BUILD_TOP/out/soong/.intermediates/frameworks/base/ravenwood
ANDROID_HOST_OUT/
ANDROID_HOST_OUT/testcases/
ANDROID_HOST_OUT/testcases/ravenwood-runtime/
EOF
        fi

        print '[ENV] $' <(
          env | sed -e 's/=.*//' | s
        )

        # Recent directories
        print "[RECENT-DIR] " <(
          timeout 0.5 recent-dirs -n 50 -z | cap 50
        )

        # Filenames in recent logs
        print '[RECENT-FILE] ' <(
          timeout 0.3 zenlog-recent-files -d | cap 500 | dir-slash
        )

        # Recent words in zenlog
        print '[RECENT-WORD] ' <(
          timeout 0.3 zenlog-last-n-contents -R -n 5 | zenlog-recent-words.pl | cap 5000
        )

        # Breath-first files
        print '[BFS] ' <(
          bfs_files | cap 5000
        )
    } 2>/dev/null |
    nobuf tr -s / /|
    nobuf tee /tmp/fzf-in.txt |
    fzf -1 -q "$token" -m --preview='preview-file {2..}' |
      perl -pe 's!^\S+\s*!!; s!^.*\{\{\s*(.*?)\s*\}\}.*$!\1!' |
      maybe_escape |
      maybe_add_space |
      add-backslash-except-for-last
)

if [[ -n "$completed" ]] ; then
  if (( $test )) ; then
    echo "'$completed'"
  else
    sh-replace-current-token "$completed"
  fi
fi
