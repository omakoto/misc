#!/bin/bash


. ~/cbin/common_rc -q

. mutil.sh

test=0
if [[ -t 1 ]] ; then
  test=1
fi

if (( $test )) ; then
  export token="$1"
else
  export token="$(sh-get-current-token -f)"
fi

# Filter out uninteresting words
clean() {
  perl -pe '(m!^ (?:
        \( [ \d\/\)\, ]*  # (1/3)
    |   \d+ \%            # 32%

    )$!x) and $_=""'
}

expand() {
  local IFS=$'\n'
  echo "$*"
}

s() {
  sort --ignore-case
}

get_dir() {
  if [[ -d "$token" ]] ; then
    echo "$token"
  else
    echo "$(dirname "$token")"
  fi
}

candidate_files() {
  (
    shopt -s nullglob

    if ! [[ "$token" =~ / ]] ; then
      command ls -A
    else
      local dir="$(get_dir)"
      expand "$dir"/*
    fi
  ) | sort | dir_slash
}

print() {
  local prefix="$1"
  shift
  timeout 1 perl -pe "print '$prefix'" "$@"
}

cap() {
  local n="$1"
  global-unique | clean | head -n "$n" | s
}

frequent_words() {
  print "[FREQ] " ~/cbin/00-frequent-words.txt
}

git_branches() {
  if in-git ; then
    git branch | s | sed -n '/^..(/d; s/^. //p;' | print "[GIT-BRANCH] "
  fi
}

dir_slash() {
  perl -ne '
#line 86
  chomp;

  $s = -d ? "/" : "";

  print($_, $s, "\n");
  '
}


files() {
  print "[FILES] " <(candidate_files)
}

android_env() {
  if [[ "$ANDROID_BUILD_TOP" == "" ]] ; then
    return
  fi
  print '[ENV]# ' <<'EOF'
$ANDROID_BUILD_TOP/
$ANDROID_BUILD_TOP/build/soong/
$ANDROID_BUILD_TOP/build/make/
$ANDROID_BUILD_TOP/cts/
$ANDROID_BUILD_TOP/frameworks/
$ANDROID_BUILD_TOP/frameworks/base/
$ANDROID_BUILD_TOP/frameworks/base/ravenwood/
$ANDROID_BUILD_TOP/frameworks/base/ravenwood/scripts/
$ANDROID_BUILD_TOP/frameworks/base/ravenwood/scripts/run-ravenwood-tests.sh -s
$ANDROID_BUILD_TOP/frameworks/base/ravenwood/tools/hoststubgen/
$ANDROID_BUILD_TOP/frameworks/base/ravenwood/tools/hoststubgen/test-tiny-framework
$ANDROID_BUILD_TOP/out/
$ANDROID_BUILD_TOP/out/soong/.intermediates/
$ANDROID_BUILD_TOP/out/soong/.intermediates/frameworks/
$ANDROID_BUILD_TOP/out/soong/.intermediates/frameworks/base/
$ANDROID_BUILD_TOP/out/soong/.intermediates/frameworks/base/ravenwood
$ANDROID_HOST_OUT/
$ANDROID_HOST_OUT/testcases/
$ANDROID_HOST_OUT/testcases/ravenwood-runtime/
EOF
}

envs() {
  print '[ENV]# $' <(
    env | sed -e 's/=.*//' | s
  )
}

recent_dirs() {
  print "[RECENT-DIR] " <(
    timeout 0.5 recent-dirs -n 50 -z
  )
}

# recent_urls() {
#   print "[$2] " <(
#     timeout 0.1 zenlog-last-n-contents -R -n $1 | perl -ne '
#       while (m! ( (?: file | https? ) \:\/\/ [^ \) ] + ) !xg) {
#         print $1, "\n"
#       }
#     ' | cap 100
#   )
# }

recent_files() {
  print "[$2] " <(
    timeout 0.2 zenlog-recent-files -d -n $1 | cap 1000 | dir-slash
  )
}

recent_ee() {
  print "[$2]# " <(
    timeout 0.2 zenlog-last-n-contents -R -n $1 | perl -ne '
      while (m! (?: ^Running: (.*) ) !xg) {
        print $1, "\n"
      }
    ' | cap 100
  )
}

recent_words() {
  print "[$2] " <(
    timeout 0.2 zenlog-last-n-contents -R -n $1 | zenlog-recent-words.pl | cap 20000
  )
}

bfs_inner() {
  {
    local timeout=0.2
    local opts="-nocolor -maxdepth 6 -name .git -prune -o -name e2etests -prune -o -name .cache -prune -o -name zenlog.log -prune -o -print "
    if ! [[ "$token" =~ / ]] ; then
      timeout $timeout bfs $opts | sed -e 's!^\./!!'
    else
      local dir="$(get_dir)"
      timeout $timeout bfs $opts "$dir"
    fi
  } 2>/dev/null
}

bfs() {
  print '[BFS] ' <(
    bfs_inner | cap 20000 | dir_slash
  )
}

soong_modules_inner() {
  allmod 2>/dev/null

  # local mod="$OUT/module-info.json"
  # local cache="$OUT/module-info-modules.cache.tmp"
  # local tmp="$OUT/module-info.tmp"

  # if ! [[ -f "$mod" ]] ; then
  #   return 0
  # fi

  # if [[ "$mod" -nt "$cache" ]] ; then
  #   rm -f "$cache" "$tmp"
  #   {
  #     jq -r 'to_entries[] | .key' "$mod" | s > "$tmp"
  #   } && mv "$tmp" "$cache"
  # fi
  # cat "$cache"
}

soong_modules() {
  print '[MODULES] ' <(
    soong_modules_inner
  )
}

filter() {
  perl -ne '
#line 236

  chomp;
  ($p, $v) = split(/ /, $_, 2);

  my $c = "";


  if (-d $v) {
    $c = "\e[38;5;13m";

  } elsif (-e $v) {
    $c = "\e[38;5;14m";

  } elsif ($p =~ /^\[RUN/) {
    $c = "\e[38;5;11m";

  } elsif ($v =~ /^ \x27? (?: file | https? ) \:\/\/ /x) { # x27 == single quote
    $c = "\e[38;5;11m";

  }

  # Highlight env vars (e.g. $XXX_YYY)
  $v =~ s/ (\$\w+) /\e[38;5;10m\1\x1b[0m/gx;


  print($p, " ", $c, $v, "\x1b[0m\n");
'
}


maybe_escape() {
  while read -r prefix word ; do
    if [[ "$prefix" =~ \#$ ]] ; then
      echo "${word}"
    
    # Special case, assume already escaped, e.g. it's an ee output
    elif [[ "$word" =~ ^\' ]] && [[ "$word" =~ \'$ ]] ; then
      echo "$word"
    else
      shescape "$word"
    fi
  done
}

maybe_add_space() {
  while read -r word ; do
    echo -n "$word"
    if [[ -f "$word" ]] ; then
      echo " "
    else
      echo
    fi
  done
}

# export FZF_DEFAULT_OPTS="--color=bg+:4,header:2 --no-mouse --no-sort --algo=v1 -e"\
# " --bind='ctrl-y:abort,"\
# "home:execute(wait-for-key),"\
# "ctrl-g:ignore,"\
# "alt-1:execute-silent(fzf-1 {+}),"\
# "alt-o:execute-silent(fzf-o {+}),"\
# "alt-i:execute-silent(fzf-io {+}),"\
# "alt-c:execute-silent(fzf-copy-args {+}),"\
# "alt-m:execute-silent(imv {+}),"\
# "ctrl-f:preview-page-down,ctrl-r:preview-page-up,ctrl-b:preview-page-up,"\
# "ctrl-k:kill-line'"\
# " --preview-window=top"\
# " --header 'Home: flip screen  Alt+1: open with 1  Alt+o: open with o Atl+i: open with ij  Alt+c: copy  Alt+m: imv  Ctrl+f/r: preview scroll'"

# need to replace {+} to {+2..}

export FZF_DEFAULT_OPTS="$(perl -pe 's!\{.*?\}!{+2..}!g' <<<"$FZF_DEFAULT_OPTS")"

      # <(recent_words 2 LAST-WORDS) \
      # <(recent_ee 2 RUNNING) \
      # <(recent_files 2 LAST-FILES) \

#      <(recent_files 5 RECENT-FILES) \
#      <(recent_words 5 RECENT-WORDS) \

#      <(frequent_words) \

#      <(files) \

completed=$({
    cat \
      <(git_branches) \
      <(android_env) \
      <(recent_dirs) \
      <(envs) \
      <(soong_modules) \
      <(bfs) \
      /dev/null
  } | filter |
    fzf --ansi -1 -q "$token" -m --preview='preview-file {2..}' |
      perl -pe 's!^\S+\s*!!;' |
      maybe_add_space |
      add-backslash-except-for-last
)

if [[ -n "$completed" ]] ; then
  if (( $test )) ; then
    echo "'$completed'"
  else
    sh-replace-current-token "$completed"
  fi
fi
