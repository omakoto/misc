#!/bin/bash

# Multi opener.

set -e

. mutil.sh

temp=${PIPE_TEMP:-/tmp}

function usage() {
  cat <<EOF

  1: Multi purpose file opener

  Usage: 1 [options] FILES...

EOF
}

opts=""
bg=1
pipe=0
force_editor=0
pretty=0
use_vim=0
copy=0
no_zenlog=0
newdoc=0
noargs=0
mkpath=0

if ! is-interactive ; then
  no_zenlog=1
fi

# if (( $# == 0 )) ; then
#   noargs=1
# fi

eval "$(getopt.pl -u usage '
  w|wait           bg=0            # Wait until the editor returns.
  n|background     bg=1            # Don'\''t wait until the editor returns (default).
  e|force-editor   force_editor=1  # Disable smart file handling and force editor.
  p|pretty         pretty=1        # Pretty-print for XML/Json.
  d|no-pretty      pretty=0        # No pretty-print.
  c|copy           copy=1          # Open copy instead.
  N|newdoc         newdoc=1        # Open new timestamped doc.
  z|no-zenlog      no_zenlog=1     # Don'\''t use zenlog logfile to catch stdin input.
  pipe|stdin       pipe=1          # Read from stdin.
  makepath       mkpath=1        # Make the directory.
' "$@")"

args=( "$@" )
files=()

if (( $newdoc )) ; then
  doc_dir=~/cbin/docs
  doc=$(datedir $doc_dir)/doc-$(date8).txt
  echo "$doc"
  opts="$opts --add $HOME/cbin"
  files+=("$doc")
fi

if (( ${#args} == 0 && ${#files} == 0 )) ; then
  if [[ -t 0 ]] ; then
    files+=("~/work.txt")
  else
    pipe=1
  fi
fi

if (( $pipe != 0 )) ; then
  if zenlog in-zenlog && (( ! $no_zenlog )) ; then
    byellow "Writing to current zenlog file..." | zenlog write-to-outer
    cat > "$(zenlog logger-pipe)"
    log=$(zenlog history -n 0)
  else
    log="$temp/pipe-$(date8)-$$.log"
    byellow -n "Logging to: "
    echo $log
    cat > $log
  fi

  args+=($log)
fi

for n in "${args[@]}" ; do
  f=""
  if (( $force_editor )) || [[ -d "$n" ]] ; then
    f="$n"
  else
    case "${n##*/}" in
      *bugreport*.zip|*bugreport*.txt|*.br)
        f="$(bugreport-extract -b "$n")"
        use_vim=1
        ;;
      *.zip)
        f=$temp/${n##*/}-$$-list.txt
        ee -2 zcat "$n" > "$f"
        ;;
      *.tar|*.tar.gz|*.tgz|*.tar.bz2|*.tar.xz)
        f=$temp/${n##*/}-$$-list.txt
        ee -2 tar tvf "$n" > "$f"
        ;;
      *.deb)
        f=$temp/${n##*/}-$$-list.txt
        ee -2 dpkg -c "$n" > "$f"
        ;;
      *.gif|*.png|*.webp|*.jpeg|*.jpg|*.mp4|*.pdf)
        chrome "$n"
        continue
        ;;
      *.pdf)
        chrome "$n"
        continue
        ;;
      *.json)
        if (( $pretty )) ; then
          f=$temp/${n##*/}-$$-pretty.json
          jsonpretty < "$n" > "$f"
          chmod -w "$f"
        else
          f="$n"
        fi
        ;;
      *.xml)
        if (( $pretty )) ; then
          f=$temp/${n##*/}-$$-pretty.xml
          xml-pretty < "$n" > "$f"
          chmod -w "$f"
        else
          f="$n"
        fi
        ;;
      *.db)
        sqliteman "$n" &
        continue
        ;;
      *)
        if [[ ! -e "$n" ]] ; then
          f="$n"
        elif [[ -d "$n" ]] || istext "$n"  ; then
          if [[ -f "$n" ]] && istext "$n" && has-ansi "$n" ; then
            chrome "$n"
            continue
          fi
          f="$n"
        else
          f=$temp/${n##*/}-$$-hexdump.txt
          ee -2 hd "$n" > "$f"
        fi
        ;;
    esac
  fi
  files+=("$f")
done

command=""
if [[ -n "$DISPLAY" ]] ; then
  if (( $use_vim )) ; then
    command=gvim
    opts=""
    bg=1
  else
    command=$(firstbin \
        /opt/sublime_text/sublime_text \
        /usr/local/makoto/sublime_text_3/sublime_text \
        /usr/local/sublime/sublime_text
        )
    if ! (( $bg )) ; then
      opts="$opts -n -w"
    fi
  fi
fi
if [[ -z "$command" ]] ; then
  command=vi
  opts=""
  bg=0
fi

if (( $copy )) ; then
  copy_temp=$(tempfile -p 1catfile)
  cat "${files[@]}" > "$copy_temp"
  files=("$copy_temp")
fi


run() {
  if (( $bg )); then
    ( "${@}" &)
  else
    "${@}"
  fi
}

fixcon
if (( ${#files[@]} > 0 )) ; then
  if (( $mkpath )) ; then
    for n in "${files[@]}"; do
      dir="$(dirname "$n")"
      if [[ ! -d "$dir" ]] ; then
        ee mkdir -p "$dir"
      fi
    done
  fi
  run ee $command $opts "${files[@]}" #| zenlog write-to-outer
fi
