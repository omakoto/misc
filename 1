#!/bin/bash

# Multi opener.

set -e

. mutil.sh

temp=${PIPE_TEMP:-/tmp}

function usage() {
  cat <<EOF

  1: Multi purpose file opener

  Usage: 1 [options] FILES...

EOF
}

opts=""
bg=1
pipe=0
force_editor=0
pretty=0
use_vim=0
copy=0
no_zenlog=0
newdoc=0
noargs=0
mkpath=0
cbin=0
quiet=0
line=0
column=0
tee=0

#if ! is-interactive ; then
#  no_zenlog=1
#fi

# if (( $# == 0 )) ; then
#   noargs=1
# fi

eval "$(bashgetopt -u usage '
  w|wait           bg=0            # Wait until the editor returns.
  n|background     bg=1            # Don'\''t wait until the editor returns (default).
  e|force-editor   force_editor=1  # Disable smart file handling and force editor.
  p|pretty         pretty=1        # Pretty-print for XML/Json.
  d|no-pretty      pretty=0        # No pretty-print.
  c|copy           copy=1          # Open copy instead.
  N|newdoc         cbin=1;newdoc=1        # Open new timestamped doc.
  z|no-zenlog      no_zenlog=1     # Don'\''t use zenlog logfile to catch stdin input.
  pipe             pipe=1          # Read from stdin.
  stdin            pipe=1          # Read from stdin.
  t|tee            tee=1;pipe=1    # Read from stdin and also print on stdout.
  makepath         mkpath=1        # Make the directory.
  C|cbin           cbin=1          # Also open ~/cbin/
  q|quiet          quiet=1         # Set EE_QUIET=1
  l|line=i         line=%          # Open at a given line
' "$@")"

args=( "$@" )
files=()


if (( $quiet )) ; then
    export EE_QUIET=1
fi

if (( $newdoc )) ; then
  doc_dir=~/cbin/docs
  doc=$(datedir $doc_dir)/doc-$(date8).txt
  echo "$doc"
  files+=("$doc")
fi

if (( $cbin )) ; then
  opts="$opts --add $HOME/cbin -n"
fi

if (( ${#args} == 0 && ${#files} == 0 )) ; then
  if [[ -t 0 ]] ; then
    files+=("~/work.txt")
  else
    pipe=1
  fi
fi

eat_stdin() {
  local out="$1"
  if (( $tee  )) ; then
    tee "$out"
  else
    cat >"$out"
  fi
}


if (( $pipe != 0 )) ; then
  if zenlog in-zenlog && (( ! $no_zenlog )) ; then
    byellow "Writing to current zenlog file..." | zenlog write-to-outer
    eat_stdin "$(zenlog logger-pipe)"
    log=$(zenlog history -n 1)
  else
    log="$temp/pipe-$(date8)-$$.log"
    byellow -n "Logging to: "
    echo $log
    eat_stdin $log
  fi

  args+=($log)
fi

# If the file doesn't exist, but it's a relative path and any (grand) parent has this file,
# then suggest opening it instead.
function resolve_file() {
  local n="$1"
  if [[ -e "$n" ]] || [[ "$n" =~ ^/ ]]  ; then
    echo "$n"
    return 0
  fi
  {
    echo "[NEW]   $PWD/$n"
    for path in $(paths-to-root "$PWD") $(recent-dirs | head -20) ; do
      f="$path$n"
      if [[ -e "$f" ]] ; then
        # echo -n "Open '$f' instead? (y/n)" 1>&2
        # read a
        # if [[ "$a" = "y" ]] ;then
        #   echo "$f"
        #   return 0
        # fi
        # break
        echo "[EXIST] $f"
      fi
    done
  } | fzf -1 | sed -e 's/^[^ ]*  *//'
  return 0
}

for n in "${args[@]}" ; do
  n="$(resolve_file "$n")"
  if (( $force_editor )) || [[ -d "$n" ]] ; then
    f="$n"
  else
    case "${n##*/}" in
      *bugreport*.zip|*bugreport*.txt|*.br|dumpState_*.log)
        is_bugreport=1
        ;;
      *.zip)
        if is-bugreport "$n" ; then
          is_bugreport=1
        else
          f="$(unzip-to-each-dir "$n")"
        fi
        ;;
      *.tar|*.tar.gz|*.tgz|*.tar.bz2|*.tar.xz|*.7z)
        f="$(unzip-to-each-dir "$n")"
        ;;
      *.deb)
        f=$temp/${n##*/}-$$-list.txt
        ee -2 dpkg -c "$n" > "$f"
        ;;
      *.gif|*.png|*.webp|*.jpeg|*.jpg|*.mp4|*.pdf)
        chrome "$n"
        continue
        ;;
      *.pdf)
        chrome "$n"
        continue
        ;;
      *.json)
        if (( $pretty )) ; then
          f=$temp/${n##*/}-$$-pretty.json
          jsonpretty < "$n" > "$f"
          chmod -w "$f"
        else
          f="$n"
        fi
        ;;
      *.xml)
        if (( $pretty )) ; then
          f=$temp/${n##*/}-$$-pretty.xml
          xml-pretty < "$n" > "$f"
          chmod -w "$f"
        else
          f="$n"
        fi
        ;;
      *.db)
        sqliteman "$n" &
        continue
        ;;
      *.log)
        f="$n"
        force_editor=1
        ;;
      *.jar)
        f="$(jd-jar "$n")"
        ;;
      *)
        if [[ ! -e "$n" ]] ; then
          f="$n"
        elif [[ -d "$n" ]] || istext "$n"  ; then
          if [[ -f "$n" ]] && istext "$n" && has-ansi "$n" ; then
            chrome "$n"
            continue
          fi
          f="$n"
        else
          f=$temp/${n##*/}-$$-hexdump.txt
          ee -2 hd "$n" > "$f"
        fi
        ;;
    esac
    if (( $is_bugreport )) ; then
      f="$(bugreport-extract -b "$n")"
      use_vim=1
    fi
  fi
  f="$(l2w "$f")" # for wsl, convert to the window path
  files+=("$f")
done

file0="${files[0]}"

sublime_win="$HOME/cbin/sublime-win"

command=""
is_vi=0
is_sublime=0

if [[ -n "$DISPLAY" ]] || iswsl  ; then
  if (( $use_vim )) ; then
    command=gvim
    opts=""
    bg=1
    is_vi=1
  else
    if iswsl ; then
      command="$sublime_win"
      is_sublime=1
    else
      command=$(firstbin \
          /opt/sublime_text/sublime_text \
          /usr/local/makoto/sublime_text_3/sublime_text \
          /usr/local/sublime/sublime_text \
          "$sublime_win"
          )
      if [[ -n "$command" ]] ; then
        is_sublime=1
      fi
    fi
    if ! (( $bg )) ; then
      opts="$opts -n -w"
    fi
  fi
fi
if [[ -z "$command" ]] ; then
  command=vi
  opts=""
  bg=0
  is_vi=1
fi

if (( $is_sublime )) ; then
  if (( $line > 0 )) ; then
    files[0]="$file0":$line
  fi
fi

if (( $is_vi )) ; then
  if (( $line > 0 )) ; then
    opts="+$line"
  fi
fi

if (( $copy )) ; then
  copy_temp=$(tempfile -p 1catfile)
  cat "${files[@]}" > "$copy_temp"
  files=("$copy_temp")
fi


run() {
  if (( $bg )); then
    ( "${@}" &)
  else
    "${@}"
  fi
}

if [[ -d "$file0" ]] ; then
  opts+=("-n")
fi


fixcon
if (( ${#files[@]} > 0 )) ; then
  if (( $mkpath )) ; then
    for n in "${files[@]}"; do
      dir="$(dirname "$n")"
      if [[ ! -d "$dir" ]] ; then
        ee mkdir -p "$dir"
      fi
    done
  fi
  # Bring the sublime window to top
  which wmctrl >&/dev/null && (
    set +e
    for n in 1 2 3 4 5 6 7 8 9 0; do
      # Find the full title.
      title="$( window-title-list | fgrep "$file0" | grep 'Sublime Text$' )"
      if [[ -n "$title" ]] ; then
        wmctrl -F -a "$title"
        break
      fi
      sleep 0.1
    done
  ) >&/dev/null &
  run ee $command $opts "${files[@]}" #| zenlog write-to-outer
fi
